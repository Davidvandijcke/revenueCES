devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?revenueCES
?revenueCES
utils:::make.packages.html(temp = TRUE)
?revenueCES
?revenueCES
?rbind
devtools::document()
devtools::document()
devtools::document()
?revenueCES
warnings()
devtools::document()
?revenueCES
warnings()
devtools::load_all()
?revenueCES
devtools::document()
?revenueCES
here()
library(here)
?revenueCES
??revenueCES
devtools::document()
?revenueCES
warnings()
devtools::document()
?revenueCES
?.revenueCES
?"/"
?.
devtools::reload()
?revenueCES
devtools::document()
?revenueCES
library(revenueCES)
?revenueCES
devtools::build_manual()
?revenueCES
?fixest
?rbind
remove.packages("here")
install.packages("her")
install.packages("here")
install.packages("here")
?revenueCES
devtools::document()
?revenueCSE
?revenueCSE
?revenueCES
library(revenueCES)
?revenueCES
devtools::document()
?revenueCES
devtools::document()
?revenueCES
devtools::document()
?revenueCES
citation("prodest")
print(prodest, bibtex=TRUE)', 'toBibtex(.)', or set
'options(citation.bibtex.max=999)
print(prodest, bibtex=TRUE)
print(prodest, bibtex=TRUE)
print("prodest", bibtex=TRUE)
print(citation("prodest"), bibtex=TRUE)
devtools::document()
?revenueCES
devtools::document()
?revenueCES
devtools::document()
?revenueCES
devtools::document()
?revenueCES
devtools::document()
devtools::document()
?revenueCES
?prodest
library(prodest)
?prodestACF
?optim
?solnp
?DEoptim
?solnp
?prodest
library(prodest)
?prodest
?prodestACF
?fixest
?feols
?rbind
?prodestACF
?parallel
?makeCluster
?prodestACF
devtools::document()
?revenueCES
?prodestACF
?revenueCES
?feols
?rbind
library('fixest')
?feols
?data.table
devtools::document()
?revenueCES
?optim
?list
?optim
?solnp
?optim
?solnp
?DEoptim
devtools::document()
?revenueCES
?revenueCES
library(revenueCES)
?revenueCES
library(revenueCES)
devtools::document()
?revenueCES
devtools::document()
?revenueCES
devtools::document()
?revenueCES
?prodestACF
?revenueCES
install.packages("BB")
gc()
#****************************************************************************************************************************************************
# MASTER SCRIPT: DC INSURRECTION
# Austin L. Wright, David Van Dijcke
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#****************************************************************************************************************************************************
#### SET OVERALL PARAMETERS ####
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
codeDir <- here::here()
setwd(codeDir) # sets cd to program directory
dir <- sub("/[^/]+$", "", codeDir)# get main directory
dataIn <- file.path(dir, "data_umich", "in")
dataBy <- file.path(dir, "data_umich", "by")
dataOut <- file.path(dir, "data_umich", "out")
tabs <- file.path(dir, "results", "tabs")
figs <- file.path(dir, "results", "figs")
#### USER-WRITTEN FUNCTIONS ####
source("utils.R")
#### LOAD LIBRARIES AND OTHER REQS ####
source("00_prep.R")
?DEoptim
install.packages("optimx")
install.packages9'rpracma'
install.packages('pracma')
?pracma
?repmat
library(pracma)
?kroneckker
?kronecker
kronecker(matrix(1,2,3),a)
kronecker(matrix(1,2,3),2)
kronecker(matrix(1,2,3),4)
?matrix
matrix(4,2,2)
matrix(4,2,3)
matrix(5,8,9)
test <- as.vector(1,6,8,9)
test <- as.vector(c(1,6,8,9))
test
lapply(test, function(x) matrix(x, 5,1))
as.matrix(lapply(test, function(x) matrix(x, 5,1)))
as.matrix(unlist(lapply(test, function(x) matrix(x, 5,1))))
test <- as.matrix(unlist(lapply(test, function(x) matrix(x, 5,1))))
Nh <- 5
N_h <- 4
N <- 5
test[seq(1,N*N_h, N)]
test <- matrix(test, 1,2)
test
test <- as.vector(1,6,8,9)
test <- as.vector(c(1,6,8,9))
test <- as.matrix(unlist(lapply(test, function(x) matrix(x, 5,1))))
test
matrix(test, 1,2)
test
matrix(test, 2,2)
test
kronecker(test, 1,2)
kronecker(test,2,1)
rep(matrix, 10)
rep(test, 10)
matrix(rep(test, 10), ncol = ncol(test), byrow = TRUE)
?kronecker
kronecker(test, rep(1, 10))
kronecker(test, matrix(1,1,10))
test <- kronecker(test, matrix(1,1,10))
test[seq(1,N*N_h,N), 1]
test[2,1] <-2
test
test[6,1] <- 5
test
test[seq(1,N*N_h,N), 1]
test[seq(1,N*N_h,N), 1]
test[seq(1,N*N_h,N), 1]^2
N
N*N_h
N
N_h
seq(1,N*N_h,N)
lapply(1:N, function(x) Pih[seq(x,N*N_h,N)]^(1-eps))
lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1-eps))
lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1))
test
test[15] <- 100
lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1))
test
as.matrix(lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1)))
as.matrix(unlist(lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1))))
as.matrix(unlist(lapply(1:N, function(x) test[seq(x,N*N_h,N)]^(1))), N_h, N)
lapply(1:N_h, function(x) test[x:(x+N)]^(1-eps))
lapply(1:N_h, function(x) test[x:(x+N)]^(1))
test
lapply(seq(1,N,N_h), function(x) test[x:(x+N)]^(1))
lapply(seq(1,N*N_h,N_h), function(x) test[x:(x+N)]^(1))
N_h
lapply(seq(1,N*N_h,N_h), function(x) test[x:(x+N-1)]^(1))
N
seq(1,N,N_h)
seq(1,N*N_h,N_h)
N
N_H
N_h
N
lapply(seq(1,N*N_h,N), function(x) test[x:(x+N-1)]^(1))
lapply(seq(1,N*N_h,N), function(x) sum(test[x:(x+N-1)]^(1)))
unlist(lapply(seq(1,N*N_h,N), function(x) sum(test[x:(x+N-1)]^(1))))
lapply(unlist(lapply(seq(1,N*N_h,N), function(x) sum(test[x:(x+N-1)]^(1)))),
function(x) matrix(x,N_h,1))
as.matrix(unlist(lapply(unlist(lapply(seq(1,N*N_h,N), function(x) sum(test[x:(x+N-1)]^(1)))),
function(x) matrix(x,N_h,1))))
?optim
?optimx
library(optimx)
?optimx
?optimr
install.packages('nleqslv')
matrix(NA, 10)
?dnorm
rnorm(500)
# assign calibrated parameters to global scope
beta_L <<- 0.4
beta_M <<- 0.4
v <<- 1 # constant returns to scale
sigma_CES <<- 0.5 # Raval (2019)
sigma <<- 1 # as in De Ridder et. al.
eps <<- 10 # as in De Ridder et. al.
N <<- 180 # as in De Ridder et. al.
N_h <<- 8 # as in De Ridder et. al.
I <<- N*N_h # total number of firms
# initialize matrix of endogenous variables
theta0 <- matrix(NA, 12*I)
theta0[1:(8*I)] <- rnorm(8*I, mean = 0, sd = 1)
epsi <<- 10 # as in De Ridder et. al.
Sigma <<- 1 # as in De Ridder et. al.
# assign calibrated parameters to global scope
beta_L <<- 0.4
beta_M <<- 0.4
v <<- 1 # constant returns to scale
sigma_CES <<- 0.5 # Raval (2019)
Sigma <<- 1 # as in De Ridder et. al.
epsi <<- 10 # as in De Ridder et. al.
N <<- 180 # as in De Ridder et. al.
N_h <<- 8 # as in De Ridder et. al.
I <<- N*N_h # total number of firms
# assign calibrated parameters to global scope
beta_L <<- 0.4
beta_M <<- 0.4
v <<- 1 # constant returns to scale
sigma_CES <<- 0.5 # Raval (2019)
Sigma <<- 1 # as in De Ridder et. al.
epsi <<- 10 # as in De Ridder et. al.
N <<- 180 # as in De Ridder et. al.
N_h <<- 8 # as in De Ridder et. al.
N_f <<- N*N_h # total number of firms
# initialize matrix of endogenous variables
theta0 <- matrix(NA, 12*N_f)
theta0[1:(8*N_f)] <- rnorm(8*N_f, mean = 0, sd = 1)
theta0
seq(1,(2*N_f),N_h)
N_f
N_h
N_f / N_h
lapply(seq(1,(2*N_f),N_h), rnorm(N_h, mean = 0, sd = 1))
lapply(seq(1,(2*N_f),N_h), rnorm, n = N_h, mean = 0, sd = 1)
?lapply
?rnorm
N_h
?to_vec
lapply(seq(1,(2*N_f),N_h), rnorm, n = N_h, mean = 0, sd = 1)
?lapply
replicate(2*N_f/N_h, rnorm, n = N_h, mean = 0, sd = 1)
replicate(2*N_f/N_h, rnorm(n = N_h, mean = 0, sd = 1))
rnorm(n = N_h, mean = 0, sd = 1)
?replicate
replicate(2*N_f/N_h, rnorm(n = 1, mean = 0, sd = 1))
replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h))
replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h), simplify = "vector")
replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h), simplify = "array")
as.matrix(replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h)))
gc()
theta0[(10*N_f+1):(12*N_f)]  as.matrix(replicate(2*N_f, rnorm(n = 1, mean = 0, sd = 1)))
replicate(2*N_f, rnorm(n = 1, mean = 0, sd = 1))
theta0[(10*N_f+1):(12*N_f)] <- replicate(2*N_f, rnorm(n = 1, mean = 0, sd = 1))
theta0
theta0[16000:16280]
theta0[(10*N_f+1):(12*N_f)] <- replicate(2, matrix(rnorm(n = 1, mean = 0, sd = 1), N_f))
theta0[16000:16280]
theta0[(length(theta0)-2*N_f-100):(length(theta0)-2*N_f+100)]
theta0[((8*N_f+1)):(10*N_f)] <- as.matrix(replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h)))
theta0[(length(theta0)-2*N_f-100):(length(theta0)-2*N_f+100)]
# initialize matrix of endogenous variables
theta0 <- matrix(NA, 12*N_f)
theta0[1:(8*N_f)] <- rnorm(8*N_f, mean = 0, sd = 1)
theta0[((8*N_f+1)):(10*N_f)] <- as.matrix(replicate(2*N_f/N_h, matrix(rnorm(n = 1, mean = 0, sd = 1),N_h)))
theta0[(10*N_f+1):(12*N_f)] <- replicate(2, matrix(rnorm(n = 1, mean = 0, sd = 1), N_f))
View(theta0)
t1 <- matrix(1,2,3)
t1
t2 <- matrix(2,2,3)
cbind(t1,t2)
?matrix
?cross
?crossprod
gc()
